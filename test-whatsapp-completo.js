const fetch = require('node-fetch');
require('dotenv').config();

// üîß CONFIGURACI√ìN - Variables de entorno
const CONFIG = {
    // Credenciales desde variables de entorno
    TWILIO_ACCOUNT_SID: process.env.TWILIO_ACCOUNT_SID,
    TWILIO_AUTH_TOKEN: process.env.TWILIO_AUTH_TOKEN,
    
    // N√∫meros de WhatsApp
    TWILIO_PHONE: process.env.TWILIO_PHONE_NUMBER || '+14155238886',
    MY_WHATSAPP: process.env.MY_WHATSAPP_NUMBER,
    
    // MercadoPago desde variables de entorno
    MP_ACCESS_TOKEN: process.env.MP_ACCESS_TOKEN
};

async function enviarMensajePruebaWhatsApp() {
    console.log('üöÄ === PRUEBA SISTEMA WHATSAPP MERCADOPAGO ===\n');
    
    // Verificar configuraci√≥n
    if (CONFIG.TWILIO_ACCOUNT_SID === 'TU_ACCOUNT_SID_AQUI') {
        console.log('‚ùå CONFIGURACI√ìN PENDIENTE');
        console.log('');
        console.log('üìù Para configurar:');
        console.log('1. Ve a: https://console.twilio.com');
        console.log('2. Copia tu Account SID y Auth Token');
        console.log('3. Activa WhatsApp Sandbox (env√≠a "join c√≥digo" a +1 415 523 8886)');
        console.log('4. Edita este archivo con tus credenciales');
        console.log('5. Ejecuta: node test-whatsapp-completo.js');
        console.log('');
        console.log('üîó Gu√≠a completa: http://localhost:3000/../twilio-config-rapida.html');
        return;
    }
    
    try {
        console.log('üì± Enviando mensaje de prueba a WhatsApp...');
        console.log('De:', CONFIG.TWILIO_PHONE);
        console.log('Para:', CONFIG.MY_WHATSAPP);
        console.log('');
        
        const mensaje = `üéâ ¬°SISTEMA ACTIVO!

üöÄ Tu plataforma MercadoPago + WhatsApp est√° funcionando perfectamente:

‚úÖ Servidor webhook: OPERATIVO
‚úÖ ngrok tunnel: CONECTADO
‚úÖ MercadoPago IPN: CONFIGURADO  
‚úÖ WhatsApp Twilio: FUNCIONANDO

üí≥ Pr√≥xima vez que recibas un pago en MercadoPago, recibir√°s una alerta instant√°nea aqu√≠.

‚ö° ¬°Todo listo para notificaciones en TIEMPO REAL!

üìÖ ${new Date().toLocaleString('es-AR')}
üîó Monitor: http://localhost:3000/../monitor-realtime.html`;

        // Crear autenticaci√≥n b√°sica
        const auth = Buffer.from(`${CONFIG.TWILIO_ACCOUNT_SID}:${CONFIG.TWILIO_AUTH_TOKEN}`).toString('base64');
        
        // Enviar mensaje v√≠a Twilio API
        const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${CONFIG.TWILIO_ACCOUNT_SID}/Messages.json`, {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${auth}`,
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                From: `whatsapp:${CONFIG.TWILIO_PHONE}`,
                To: `whatsapp:${CONFIG.MY_WHATSAPP}`,
                Body: mensaje
            })
        });
        
        const responseText = await response.text();
        
        if (response.ok) {
            const data = JSON.parse(responseText);
            console.log('‚úÖ ¬°MENSAJE ENVIADO EXITOSAMENTE!');
            console.log('');
            console.log('üìã Detalles:');
            console.log('üÜî SID:', data.sid);
            console.log('üì± To:', data.to);
            console.log('üì§ Status:', data.status);
            console.log('üí∞ Price:', data.price || 'FREE');
            console.log('üïê Created:', data.date_created);
            console.log('');
            console.log('üéØ ¬°Verifica tu WhatsApp ahora!');
            console.log('üì± Deber√≠as ver el mensaje con toda la informaci√≥n del sistema.');
            console.log('');
            console.log('üöÄ SIGUIENTE PASO:');
            console.log('Haz una compra en: https://www.mercadopago.com.ar/checkout/v1/redirect?pref_id=3608042-ab6b8f5a-f15e-4a4c-a15d-53fa490a9642');
            console.log('Y ver√°s la alerta de pago llegar autom√°ticamente!');
            
        } else {
            console.log('‚ùå ERROR ENVIANDO MENSAJE');
            console.log('Status:', response.status);
            console.log('Response:', responseText);
            
            try {
                const errorData = JSON.parse(responseText);
                console.log('');
                console.log('üîß DIAGN√ìSTICO:');
                
                if (errorData.code === 21211) {
                    console.log('‚ùå Tu n√∫mero no est√° registrado en el WhatsApp Sandbox');
                    console.log('');
                    console.log('‚úÖ SOLUCI√ìN:');
                    console.log('1. Abre WhatsApp en tu tel√©fono');
                    console.log('2. Env√≠a un mensaje a: +1 415 523 8886');
                    console.log('3. El mensaje debe ser: "join [tu-codigo]"');
                    console.log('4. Ve a console.twilio.com ‚Üí Messaging ‚Üí Try WhatsApp');
                    console.log('5. Ah√≠ encontrar√°s tu c√≥digo √∫nico');
                    console.log('6. Ejemplo: "join operation-carbon"');
                    console.log('7. Espera confirmaci√≥n y vuelve a ejecutar este script');
                } else if (errorData.code === 20003) {
                    console.log('‚ùå Credenciales inv√°lidas');
                    console.log('‚úÖ Verifica Account SID y Auth Token en console.twilio.com');
                } else {
                    console.log('‚ùå Error:', errorData.message);
                    console.log('üîó C√≥digo:', errorData.code);
                }
            } catch {
                console.log('Raw error:', responseText);
            }
        }
        
    } catch (error) {
        console.error('‚ùå ERROR DE CONEXI√ìN:', error.message);
        console.log('');
        console.log('üîß Verifica:');
        console.log('1. Conexi√≥n a internet');
        console.log('2. Credenciales Twilio correctas');
        console.log('3. Account SID empieza con "AC"');
        console.log('4. Auth Token tiene 32 caracteres');
    }
}

async function verificarSistemaCompleto() {
    console.log('üîç Verificando sistema completo...\n');
    
    try {
        // 1. Verificar servidor webhook
        console.log('üì° 1. Verificando servidor webhook...');
        const healthResponse = await fetch('http://localhost:3000/health');
        if (healthResponse.ok) {
            const health = await healthResponse.json();
            console.log('   ‚úÖ Servidor activo (uptime:', Math.floor(health.uptime), 'segundos)');
        } else {
            console.log('   ‚ùå Servidor offline');
            return;
        }
        
        // 2. Verificar estad√≠sticas webhook
        console.log('üìä 2. Verificando estad√≠sticas...');
        const statsResponse = await fetch('http://localhost:3000/webhook/status');
        if (statsResponse.ok) {
            const stats = await statsResponse.json();
            console.log('   üìà Webhooks recibidos:', stats.totalWebhooks);
            console.log('   üïê √öltimo webhook:', stats.lastWebhook || 'Ninguno');
        }
        
        // 3. Verificar configuraci√≥n Twilio
        console.log('üîß 3. Verificando configuraci√≥n Twilio...');
        const twilioResponse = await fetch('http://localhost:3000/test/twilio');
        if (twilioResponse.ok) {
            const twilio = await twilioResponse.json();
            if (twilio.configured) {
                console.log('   ‚úÖ Twilio configurado');
                console.log('   üì± Account:', twilio.account_sid?.substr(0, 10) + '...');
            } else {
                console.log('   ‚ö†Ô∏è  Twilio no configurado');
            }
        }
        
        console.log('\nüöÄ Sistema verificado. Procediendo con la prueba...\n');
        
    } catch (error) {
        console.log('‚ùå Error verificando sistema:', error.message);
    }
}

// Funci√≥n principal
async function main() {
    await verificarSistemaCompleto();
    await enviarMensajePruebaWhatsApp();
}

// Ejecutar si se llama directamente
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { CONFIG, enviarMensajePruebaWhatsApp };